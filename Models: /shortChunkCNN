# Part 1 Feature Extraction
#1.1 import libaries ( not gonna need all of them probably)
import os, sys
import numpy as np
import pandas as pd
import librosa
import IPython.display as ipd
from tqdm import tqdm
import matplotlib.pyplot as plt
import librosa.display
#1.2  Save audio paths and target labels 
# Get the base directory
basedir = os.getcwd()                   # insert our directory 
dirname = basedir+ "/Data/genres_original"

# Create lists for audio paths and labels
for root, dirs, files in os.walk(dirname, topdown=False):
    for filenames in files:
        if filenames.find('.wav') != -1:

            audio_paths.append(os.path.join(root, filenames))
            filenames = filenames.split('.', 1)
            filenames = filenames[0]
            audio_label.append(filenames)
audio_paths = np.array(audio_paths)
audio_label = np.array(audio_label)

# audio_paths.shape
#1.3 Extract features for spectorgram and mel-spectorgam 
# Create empty arrays for the features
AllSpec = np.empty([1000, 1025, 1293])
AllMel = np.empty([1000, 128, 1293])

count = 0

# Create a list for the corrupt indices (idk if this applies to us as we dont have any corrupt files)
bad_index = []
for i in tqdm(range(len(audio_paths))):
    try:

        path = audio_paths[i]
        y, sr = librosa.load(path)
        # For Spectrogram
        X = librosa.stft(y)
        Xdb = librosa.amplitude_to_db(abs(X))
        AllSpec[i] = Xdb
        
        # Mel-Spectrogram 
        M = librosa.feature.melspectrogram(y=y)
        M_db = librosa.power_to_db(M)
        AllMel[i] = M_db

except Exception as e:
        bad_index.append(i)

#1.4  Remove corrupt files - Delete the audio files and labels at the corrupt indices. 
# The features are then converted to float32 data type to save memory usage. 
# After that, we assign the labels numerical values and convert them into categorical data. 
# In the end, we save all the extracted features and their labels into a .npz file.
# When we start the classification task, we can directly load the .npz file to use the features.

# 1.4.1 Delete the features at the corrupt indices
AllSpec = np.delete(AllSpec, bad_index, 0)
AllMel = np.delete(AllMel, bad_index, 0)

# Convert features to float32 
AllSpec = AllSpec.astype(np.float32)
AllMel = AllMel.astype(np.float32)

# Delete audio labels at corrupt indices
audio_label = np.delete(audio_label, bad_index)

# Convert labels from string into numerical value
audio_label[audio_label == 'blues'] = 0
audio_label[audio_label == 'classical'] = 1
audio_label[audio_label == 'country'] = 2
audio_label[audio_label == 'disco'] = 3
audio_label[audio_label == 'hiphop'] = 4
audio_label[audio_label == 'jazz'] = 5
audio_label[audio_label == 'metal'] = 6
audio_label[audio_label == 'pop'] = 7
audio_label[audio_label == 'reggae'] = 8
audio_label[audio_label == 'rock'] = 9
audio_label = [int(i) for i in audio_label]
audio_label = np.array(audio_label)

# Convert numerical data into categorical data
y = tensorflow.keras.utils.to_categorical(audio_label,num_classes = 10, dtype ="int32")

# Save the features and labels as a .npz file
np.savez_compressed(os.getcwd()+"/MusicFeatures.npz", spec= AllSpec, mel= AllMel, mfcc= AllMfcc, zcr= AllZcr, cen= AllCen, chroma= AllChroma, target=y)
